import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

  	// /hadoop/hadoop-dist/target/hadoop-2.7.3/lib/native/libhadoop.so
  	// /hadoop/hadoop-dist/target/hadoop-2.7.3/lib/native/libhdfs.so	

  	//static {
        //	System.load("/hadoop/hadoop-dist/target/hadoop-2.7.3/lib/native/libhadoop.so");
        //	
  	//}

	// Use the sun.tools.javac.Main class located in jdk1.8.0/lib/tools.jar

	// Maps are the individual tasks that transform input records into intermediate records
        // The Hadoop MapReduce framework spawns one map task for each InputSplit generated by the InputFormat for the job.
  	public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable>{

    		private final static IntWritable one = new IntWritable(1);
    		private Text word = new Text();

    		//The Mapper implementation processes one line at a time as provided by the specified FileInputFormat
    		public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
      				
			// It then splits the line into tokens separated by whitespaces, via the StringTokenizer,
                        StringTokenizer itr = new StringTokenizer(value.toString());
      			while (itr.hasMoreTokens()) {
        			word.set(itr.nextToken());
				
				// emits a key-value pair of < <word>, 1>.
        			context.write(word, one);
      			}
    		}
  	}

	
	// Reducer reduces a set of intermediate values which share a key to a smaller set of values.
  	public static class IntSumReducer extends Reducer<Text,IntWritable,Text,IntWritable> {
    		private IntWritable result = new IntWritable();

		// In this phase the reduce(WritableComparable, Iterable<Writable>, Context) method is called for each <key, (list of values)> pair in the grouped inputs.
    		public void reduce(Text key, Iterable<IntWritable> values, Context context ) throws IOException, InterruptedException {
      			int sum = 0;
      			for (IntWritable val : values) {
        			sum += val.get();
      			}
      			result.set(sum);

			//The output of the reduce task is typically written to the FileSystem via Context.write(WritableComparable, Writable).
      			context.write(key, result);
    		}
  	}

  	public static void main(String[] args) throws Exception {
    		Configuration conf = new Configuration();
    		Job job = Job.getInstance(conf, "word count");
    		job.setJarByClass(WordCount.class);

		//mapper implementations are passed to the job via Job.setMapperClass(Class) method
    		job.setMapperClass(TokenizerMapper.class);
		// The framework then calls map(WritableComparable, Writable, Context) for each key/value pair in the InputSplit for that task. 

		// Users can optionally specify a combiner, via Job.setCombinerClass(Class), to perform local aggregation of the intermediate outputs
		// the output of each map is passed through the local combiner
    		job.setCombinerClass(IntSumReducer.class);

    		job.setReducerClass(IntSumReducer.class);

		// key/value types
    		job.setOutputKeyClass(Text.class);
    		job.setOutputValueClass(IntWritable.class);

		// bin/hadoop jar wc.jar WordCount ./input ./output
    		FileInputFormat.addInputPath(job, new Path(args[0]));
    		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		// calls the job.waitForCompletion to submit the job and monitor its progress.
    		System.exit(job.waitForCompletion(true) ? 0 : 1);
  	}
}
